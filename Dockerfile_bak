# Step 1: Backend Build (Build the backend using Maven)
FROM eclipse-temurin:21-jdk-alpine AS backend-builder

RUN echo "step 1 running..."

WORKDIR /app
# Copy backend source code into the temporary directory
COPY ./backend /app/temp/backend
# Build the backend (skip tests)
RUN cd /app/temp/backend && \
    ./mvnw clean package -DskipTests && \
    echo "Backend build completed"



WORKDIR /app
# Move the built JAR file from temp directory to /app/backend
RUN mv /app/temp/backend/target/*.jar /app/backend/backend.jar && \
    echo "Backend JAR file moved"



WORKDIR /app
# Clean up the temporary directory
RUN rm -rf /app/temp && \
    echo "temp removed"



# step 2  =============================================================
FROM node:20-alpine AS frontend-builder


RUN echo "step 2 running..."



WORKDIR /app
#  copy frontend code
COPY ./frontend /app/temp/frontend
# excute some command to install nginx and pnpm,then copy the frontend dist folder to /app/frontend/ and Nginx's default directory.
RUN apk update && \
    apk add --no-cache nginx npm && \
    # Install pnpm
    npm install -g pnpm && \
    echo "pnpm, nginx installed"



# build dist
WORKDIR /app
RUN cd /app/temp/frontend && \
    pnpm install && \
    pnpm build && \
    echo "frontend dist build done"



# copy dist, nginx.conf
WORKDIR /app
RUN cp -r /app/temp/frontend/dist /app/frontend && \
    cp -r /app/temp/frontend/dist /usr/share/nginx/html && \
    echo "frontend dist copied"



# back to /app ,then copy to /app/frontend
WORKDIR /app
RUN rm -rf /app/temp && \
    echo "temp removed"



# Set working directory
WORKDIR /app
# copy host's nginx.conf to the container /etc/nginx/nginx.conf
COPY ./nginx.conf /etc/nginx/nginx.conf


# log info test
RUN echo "Hello, World!"


# expose 8080 and 3000 port (8008 is backend port, 3000 is frontend port)
EXPOSE 8080 3000


# Start backend and frontend services
# CMD ["java","-jar", "/app/backend/backend.jar","nginx","-g","'daemon off;'"]
CMD ["sh", "-c", "java -jar /app/backend/backend.jar & nginx -g 'daemon off;'"]

# test to run
# docker build -t mydocker .
# docker run -d -p 8080:8080 -p 3000:3000 mydocker
# frontend vist http://localhost:3000  | backend vist http://localhost:8080